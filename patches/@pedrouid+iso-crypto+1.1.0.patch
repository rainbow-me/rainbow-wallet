diff --git a/node_modules/@pedrouid/iso-crypto/dist/cjs/helpers/env/node.js b/node_modules/@pedrouid/iso-crypto/dist/cjs/helpers/env/node.js
index d91d64f..88f587c 100644
--- a/node_modules/@pedrouid/iso-crypto/dist/cjs/helpers/env/node.js
+++ b/node_modules/@pedrouid/iso-crypto/dist/cjs/helpers/env/node.js
@@ -8,27 +8,27 @@ const crypto_1 = __importDefault(require("crypto"));
 const enc_utils_1 = require("enc-utils");
 const constants_1 = require("../constants");
 function nodeAesEncrypt(iv, key, data) {
-    const cipher = crypto_1.default.createCipheriv(constants_1.AES_NODE_ALGO, key, iv);
-    return enc_utils_1.bufferToArray(enc_utils_1.concatBuffers(cipher.update(data), cipher.final()));
+    const cipher = crypto_1.default.createCipheriv(constants_1.AES_NODE_ALGO, Buffer.from(key), Buffer.from(iv));
+    return enc_utils_1.bufferToArray(enc_utils_1.concatBuffers(cipher.update(Buffer.from(data)), cipher.final()));
 }
 exports.nodeAesEncrypt = nodeAesEncrypt;
 function nodeAesDecrypt(iv, key, data) {
-    const decipher = crypto_1.default.createDecipheriv(constants_1.AES_NODE_ALGO, key, iv);
-    return enc_utils_1.bufferToArray(enc_utils_1.concatBuffers(decipher.update(data), decipher.final()));
+    const decipher = crypto_1.default.createDecipheriv(constants_1.AES_NODE_ALGO, Buffer.from(key), Buffer.from(iv));
+    return enc_utils_1.bufferToArray(enc_utils_1.concatBuffers(decipher.update(Buffer.from(data)), decipher.final()));
 }
 exports.nodeAesDecrypt = nodeAesDecrypt;
 function nodeHmacSha256Sign(key, data) {
     const buf = crypto_1.default
-        .createHmac(constants_1.HMAC_NODE_ALGO, new Uint8Array(key))
-        .update(data)
+        .createHmac(constants_1.HMAC_NODE_ALGO, Buffer.from(new Uint8Array(key)))
+        .update(Buffer.from(data))
         .digest();
     return enc_utils_1.bufferToArray(buf);
 }
 exports.nodeHmacSha256Sign = nodeHmacSha256Sign;
 function nodeHmacSha512Sign(key, data) {
     const buf = crypto_1.default
-        .createHmac(constants_1.SHA512_NODE_ALGO, new Uint8Array(key))
-        .update(data)
+        .createHmac(constants_1.SHA512_NODE_ALGO, Buffer.from(new Uint8Array(key)))
+        .update(Buffer.from(data))
         .digest();
     return enc_utils_1.bufferToArray(buf);
 }
@@ -36,7 +36,7 @@ exports.nodeHmacSha512Sign = nodeHmacSha512Sign;
 function nodeSha256(data) {
     const buf = crypto_1.default
         .createHash(constants_1.SHA256_NODE_ALGO)
-        .update(data)
+        .update(Buffer.from(data))
         .digest();
     return enc_utils_1.bufferToArray(buf);
 }
@@ -44,7 +44,7 @@ exports.nodeSha256 = nodeSha256;
 function nodeSha512(data) {
     const buf = crypto_1.default
         .createHash(constants_1.SHA512_NODE_ALGO)
-        .update(data)
+        .update(Buffer.from(data))
         .digest();
     return enc_utils_1.bufferToArray(buf);
 }
@@ -52,7 +52,7 @@ exports.nodeSha512 = nodeSha512;
 function nodeRipemd160(data) {
     const buf = crypto_1.default
         .createHash(constants_1.RIPEMD160_NODE_ALGO)
-        .update(data)
+        .update(Buffer.from(data))
         .digest();
     return enc_utils_1.bufferToArray(buf);
 }
